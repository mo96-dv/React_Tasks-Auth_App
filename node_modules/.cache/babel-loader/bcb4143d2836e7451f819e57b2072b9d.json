{"ast":null,"code":"var _jsxFileName = \"E:\\\\Mo'men Data\\\\Training\\\\Routing-Authentication\\\\Auth\\\\src\\\\components\\\\tasks\\\\Task.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport classes from './TaskList.module.css';\nimport TaskForm from './TaskForm';\nimport TaskList from './TaskList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Task = () => {\n  _s();\n\n  const [taskDetails, setTaskDetails] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isSubmited, setIsSubmited] = useState(''); // MAKING OUR REALTIME DATA BASE URL CONSTANT\n\n  const url = 'https://second-demo-auth-post-get-default-rtdb.firebaseio.com/Task.json'; // POSTING REQUEST:\n\n  const posting = async TasksInputs => {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(TasksInputs)\n    });\n\n    if (response.ok) {\n      setIsSubmited('success');\n      setTimeout(() => {\n        setIsSubmited('');\n      }, 3000);\n    }\n\n    const data = await response.json();\n    console.log(data);\n  }; // GET REQUEST:\n\n\n  const getData = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error('Somthing Went Wrong');\n      }\n\n      const data = await response.json();\n      const gettedData = [];\n\n      for (const key in data) {\n        gettedData.push({\n          title: data[key].taskDetails,\n          date: data[key].taskEndDate,\n          id: data[key].taskId\n        });\n      }\n\n      setTaskDetails(gettedData);\n    } catch (error) {\n      setError(error);\n    }\n\n    setIsLoading(false);\n  }; // HANDLING THE DELETE METHOD (( NOT FROM THE DATA BASE !!))\n\n\n  const deleteHandeler = id => {\n    const FilteredTasks = taskDetails.filter(task => task.id !== id);\n    setTaskDetails(FilteredTasks);\n  }; // Handling Errors And Loading Status\n\n\n  let content;\n\n  if (taskDetails.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(TaskList, {\n      onDeleteMe: deleteHandeler,\n      taskGetted: taskDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (taskDetails.length === 0) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.section,\n      children: \"Found No Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.section,\n      children: \"Some Thing Went Wrong\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.section,\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n        onAddTask: posting\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), isSubmited]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.section,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.btn,\n        onClick: getData,\n        children: \"Get My Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Task, \"XhYuJ4FnvehVC5rROPTGH3qSq2o=\");\n\n_c = Task;\nexport default Task;\n\nvar _c;\n\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"sources":["E:/Mo'men Data/Training/Routing-Authentication/Auth/src/components/tasks/Task.js"],"names":["React","useState","classes","TaskForm","TaskList","Task","taskDetails","setTaskDetails","isLoading","setIsLoading","error","setError","isSubmited","setIsSubmited","url","posting","TasksInputs","response","fetch","method","headers","body","JSON","stringify","ok","setTimeout","data","json","console","log","getData","Error","gettedData","key","push","title","date","taskEndDate","id","taskId","deleteHandeler","FilteredTasks","filter","task","content","length","section","btn"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport classes from './TaskList.module.css';\r\nimport TaskForm from './TaskForm';\r\nimport TaskList from './TaskList';\r\n\r\nconst Task = () => {\r\n  const [taskDetails, setTaskDetails] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [isSubmited, setIsSubmited] = useState('');\r\n\r\n  // MAKING OUR REALTIME DATA BASE URL CONSTANT\r\n\r\n  const url =\r\n    'https://second-demo-auth-post-get-default-rtdb.firebaseio.com/Task.json';\r\n\r\n  // POSTING REQUEST:\r\n\r\n  const posting = async (TasksInputs) => {\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(TasksInputs),\r\n    });\r\n\r\n    if (response.ok) {\r\n      setIsSubmited('success');\r\n      setTimeout(() => {\r\n        setIsSubmited('');\r\n      }, 3000);\r\n    }\r\n    const data = await response.json();\r\n    console.log(data);\r\n  };\r\n\r\n  // GET REQUEST:\r\n\r\n  const getData = async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        throw new Error('Somthing Went Wrong');\r\n      }\r\n      const data = await response.json();\r\n\r\n      const gettedData = [];\r\n\r\n      for (const key in data) {\r\n        gettedData.push({\r\n          title: data[key].taskDetails,\r\n          date: data[key].taskEndDate,\r\n          id: data[key].taskId,\r\n        });\r\n      }\r\n      setTaskDetails(gettedData);\r\n    } catch (error) {\r\n      setError(error);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  // HANDLING THE DELETE METHOD (( NOT FROM THE DATA BASE !!))\r\n\r\n  const deleteHandeler = (id) => {\r\n    const FilteredTasks = taskDetails.filter((task) => task.id !== id);\r\n    setTaskDetails(FilteredTasks);\r\n  };\r\n  // Handling Errors And Loading Status\r\n  let content;\r\n\r\n  if (taskDetails.length > 0) {\r\n    content = <TaskList onDeleteMe={deleteHandeler} taskGetted={taskDetails} />;\r\n  }\r\n  if (taskDetails.length === 0) {\r\n    content = <p className={classes.section}>Found No Tasks</p>;\r\n  }\r\n\r\n  if (error) {\r\n    content = <p className={classes.section}>Some Thing Went Wrong</p>;\r\n  }\r\n  if (isLoading) {\r\n    content = <p className={classes.section}>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <section>\r\n        <TaskForm onAddTask={posting} />\r\n        {isSubmited}\r\n      </section>\r\n      {/* <section className={classes.section}> {isSubmited}</section> */}\r\n      <section className={classes.section}>\r\n        <button className={classes.btn} onClick={getData}>\r\n          Get My Data\r\n        </button>\r\n      </section>\r\n      <section>{content}</section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n"]},"metadata":{},"sourceType":"module"}