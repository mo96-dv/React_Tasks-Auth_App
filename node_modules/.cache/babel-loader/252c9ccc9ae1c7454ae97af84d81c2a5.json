{"ast":null,"code":"var _jsxFileName = \"E:\\\\Mo'men Data\\\\Training\\\\Routing-Authentication\\\\Auth\\\\src\\\\components\\\\tasks\\\\Task.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport classes from './TaskList.module.css';\nimport TaskForm from './TaskForm';\nimport TaskList from './TaskList';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Task = () => {\n  _s();\n\n  const [taskDetails, setTaskDetails] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSubmited, setIsSubmited] = useState('');\n  const [sending, setSending] = useState(false);\n  const [error, setError] = useState(null); // MAKING OUR REALTIME DATA BASE URL CONSTANT\n\n  const url = 'https://second-demo-auth-post-get-default-rtdb.firebaseio.com/Task.json'; // POSTING REQUEST:\n\n  const posting = async TasksInputs => {\n    setSending(true);\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(TasksInputs)\n    });\n\n    if (response.ok) {\n      setSending(false);\n      setIsSubmited('success');\n      setTimeout(() => {\n        setIsSubmited('');\n      }, 1500);\n    } else {\n      setSending(true);\n      setIsSubmited('Faild');\n    }\n\n    const data = await response.json();\n    console.log(data);\n  }; // GET REQUEST:\n  // **** Axios ****\n\n\n  const getData = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await axios.get(url);\n\n      if (!response.ok) {\n        throw new Error('Somthing Went Wrong');\n      }\n\n      console.log(response);\n      const taskInputsData = response.data;\n      console.log(taskInputsData);\n      const gettedData = [];\n\n      for (const key in taskInputsData) {\n        gettedData.push({\n          title: taskInputsData[key].taskDetails,\n          date: taskInputsData[key].taskEndDate,\n          id: taskInputsData[key].taskId\n        });\n      }\n\n      setTaskDetails(gettedData);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }; // **** Fetch() ****\n  // const getData = async () => {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   try {\n  //     const response = await fetch(url);\n  //     if (!response.ok) {\n  //       throw new Error('Somthing Went Wrong');\n  //     }\n  //     const data = await response.json();\n  //     const gettedData = [];\n  //     for (const key in data) {\n  //       gettedData.push({\n  //         title: data[key].taskDetails,\n  //         date: data[key].taskEndDate,\n  //         id: data[key].taskId,\n  //       });\n  //     }\n  //     setTaskDetails(gettedData);\n  //   } catch (error) {\n  //     setError(error);\n  //   }\n  //   setIsLoading(false);\n  // };\n  // HANDLING THE DELETE METHOD (( NOT FROM THE DATA BASE !!))\n\n\n  const deleteHandeler = async id => {\n    // await fetch(`${url}/${id}`, { method: 'DELETE' });\n    const FilteredTasks = taskDetails.filter(task => task.id !== id);\n    setTaskDetails(FilteredTasks);\n  }; // Handling Errors And Loading Status\n\n\n  let listContent;\n  let formContent;\n\n  if (taskDetails.length > 0) {\n    listContent = /*#__PURE__*/_jsxDEV(TaskList, {\n      onDeleteMe: deleteHandeler,\n      taskGetted: taskDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (taskDetails.length === 0) {\n    listContent = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.section,\n      children: \"Found No Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 19\n    }, this);\n  }\n\n  if (error) {\n    listContent = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.section,\n      children: \"Some Thing Went Wrong\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 19\n    }, this);\n  }\n\n  if (isLoading) {\n    listContent = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.section,\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 19\n    }, this);\n  }\n\n  if (sending) {\n    formContent = /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center',\n        color: 'darkgoldenrod',\n        fontSize: '23px',\n        fontWeight: 'bold'\n      },\n      className: classes.section,\n      children: \"Wait A Moment...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n        onAddTask: posting\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), formContent, /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: 'center',\n          color: 'seagreen',\n          fontSize: '23px',\n          fontWeight: 'bold'\n        },\n        children: isSubmited\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.section,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.btn,\n        onClick: getData,\n        children: \"Get My Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: listContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Task, \"uKqZDjDRu5cfP4JEF7xnap3RQF4=\");\n\n_c = Task;\nexport default Task; // const getData = async () => {\n//   setIsLoading(true);\n//   setError(null);\n//   try {\n//     const response = await axios.get(url);\n//     if (!response.ok) {\n//       throw new Error('Somthing Went Wrong');\n//     }\n//     const taskInputsData = response.data;\n//     const gettedData = [];\n//     for (const key in taskInputsData) {\n//       gettedData.push({\n//         title: taskInputsData[key].taskDetails,\n//         date: taskInputsData[key].taskEndDate,\n//         id: taskInputsData[key].taskId,\n//       });\n//     }\n//     setTaskDetails(gettedData);\n//   } catch (error) {\n//     setError(error);\n//   }\n//   setIsLoading(false);\n// };\n\nvar _c;\n\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"sources":["E:/Mo'men Data/Training/Routing-Authentication/Auth/src/components/tasks/Task.js"],"names":["React","useState","classes","TaskForm","TaskList","axios","Task","taskDetails","setTaskDetails","isLoading","setIsLoading","isSubmited","setIsSubmited","sending","setSending","error","setError","url","posting","TasksInputs","response","fetch","method","headers","body","JSON","stringify","ok","setTimeout","data","json","console","log","getData","get","Error","taskInputsData","gettedData","key","push","title","date","taskEndDate","id","taskId","message","deleteHandeler","FilteredTasks","filter","task","listContent","formContent","length","section","textAlign","color","fontSize","fontWeight","btn"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport classes from './TaskList.module.css';\r\nimport TaskForm from './TaskForm';\r\nimport TaskList from './TaskList';\r\nimport axios from 'axios';\r\n\r\nconst Task = () => {\r\n  const [taskDetails, setTaskDetails] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isSubmited, setIsSubmited] = useState('');\r\n  const [sending, setSending] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // MAKING OUR REALTIME DATA BASE URL CONSTANT\r\n\r\n  const url =\r\n    'https://second-demo-auth-post-get-default-rtdb.firebaseio.com/Task.json';\r\n\r\n  // POSTING REQUEST:\r\n\r\n  const posting = async (TasksInputs) => {\r\n    setSending(true);\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(TasksInputs),\r\n    });\r\n\r\n    if (response.ok) {\r\n      setSending(false);\r\n      setIsSubmited('success');\r\n      setTimeout(() => {\r\n        setIsSubmited('');\r\n      }, 1500);\r\n    } else {\r\n      setSending(true);\r\n      setIsSubmited('Faild');\r\n    }\r\n    const data = await response.json();\r\n    console.log(data);\r\n  };\r\n\r\n  // GET REQUEST:\r\n  // **** Axios ****\r\n\r\n  const getData = async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await axios.get(url);\r\n      if (!response.ok) {\r\n        throw new Error('Somthing Went Wrong');\r\n      }\r\n      console.log(response);\r\n      const taskInputsData = response.data;\r\n      console.log(taskInputsData);\r\n\r\n      const gettedData = [];\r\n\r\n      for (const key in taskInputsData) {\r\n        gettedData.push({\r\n          title: taskInputsData[key].taskDetails,\r\n          date: taskInputsData[key].taskEndDate,\r\n          id: taskInputsData[key].taskId,\r\n        });\r\n      }\r\n      setTaskDetails(gettedData);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  // **** Fetch() ****\r\n  // const getData = async () => {\r\n  //   setIsLoading(true);\r\n  //   setError(null);\r\n  //   try {\r\n  //     const response = await fetch(url);\r\n  //     if (!response.ok) {\r\n  //       throw new Error('Somthing Went Wrong');\r\n  //     }\r\n  //     const data = await response.json();\r\n\r\n  //     const gettedData = [];\r\n\r\n  //     for (const key in data) {\r\n  //       gettedData.push({\r\n  //         title: data[key].taskDetails,\r\n  //         date: data[key].taskEndDate,\r\n  //         id: data[key].taskId,\r\n  //       });\r\n  //     }\r\n  //     setTaskDetails(gettedData);\r\n  //   } catch (error) {\r\n  //     setError(error);\r\n  //   }\r\n  //   setIsLoading(false);\r\n  // };\r\n\r\n  // HANDLING THE DELETE METHOD (( NOT FROM THE DATA BASE !!))\r\n\r\n  const deleteHandeler = async (id) => {\r\n    // await fetch(`${url}/${id}`, { method: 'DELETE' });\r\n    const FilteredTasks = taskDetails.filter((task) => task.id !== id);\r\n    setTaskDetails(FilteredTasks);\r\n  };\r\n  // Handling Errors And Loading Status\r\n  let listContent;\r\n  let formContent;\r\n\r\n  if (taskDetails.length > 0) {\r\n    listContent = (\r\n      <TaskList onDeleteMe={deleteHandeler} taskGetted={taskDetails} />\r\n    );\r\n  }\r\n  if (taskDetails.length === 0) {\r\n    listContent = <p className={classes.section}>Found No Tasks</p>;\r\n  }\r\n\r\n  if (error) {\r\n    listContent = <p className={classes.section}>Some Thing Went Wrong</p>;\r\n  }\r\n  if (isLoading) {\r\n    listContent = <p className={classes.section}>Loading...</p>;\r\n  }\r\n  if (sending) {\r\n    formContent = (\r\n      <p\r\n        style={{\r\n          textAlign: 'center',\r\n          color: 'darkgoldenrod',\r\n          fontSize: '23px',\r\n          fontWeight: 'bold',\r\n        }}\r\n        className={classes.section}\r\n      >\r\n        Wait A Moment...\r\n      </p>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <section>\r\n        <TaskForm onAddTask={posting} />\r\n        {formContent}\r\n        <p\r\n          style={{\r\n            textAlign: 'center',\r\n            color: 'seagreen',\r\n            fontSize: '23px',\r\n            fontWeight: 'bold',\r\n          }}\r\n        >\r\n          {isSubmited}\r\n        </p>\r\n      </section>\r\n      <section className={classes.section}>\r\n        <button className={classes.btn} onClick={getData}>\r\n          Get My Data\r\n        </button>\r\n      </section>\r\n      <section>{listContent}</section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n\r\n// const getData = async () => {\r\n//   setIsLoading(true);\r\n//   setError(null);\r\n//   try {\r\n//     const response = await axios.get(url);\r\n//     if (!response.ok) {\r\n//       throw new Error('Somthing Went Wrong');\r\n//     }\r\n//     const taskInputsData = response.data;\r\n\r\n//     const gettedData = [];\r\n\r\n//     for (const key in taskInputsData) {\r\n//       gettedData.push({\r\n//         title: taskInputsData[key].taskDetails,\r\n//         date: taskInputsData[key].taskEndDate,\r\n//         id: taskInputsData[key].taskId,\r\n//       });\r\n//     }\r\n//     setTaskDetails(gettedData);\r\n//   } catch (error) {\r\n//     setError(error);\r\n//   }\r\n//   setIsLoading(false);\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}