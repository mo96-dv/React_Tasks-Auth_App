{"ast":null,"code":"var _jsxFileName = \"E:\\\\Mo'men Data\\\\Training\\\\Routing-Authentication\\\\Auth\\\\src\\\\components\\\\tasks\\\\Task.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport TaskForm from './TaskForm';\nimport TaskList from './TaskList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Task = () => {\n  _s();\n\n  const [taskDetails, setTaskDetails] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const url = 'https://second-demo-auth-post-get-default-rtdb.firebaseio.com/Task.json'; // POSTING REQUEST:\n\n  const posting = async TasksInputs => {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(TasksInputs)\n    });\n    const data = await response.json();\n    console.log(data);\n  }; // GET REQUEST:\n\n\n  const getData = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error('Somthing Went Wrong');\n      }\n\n      const data = await response.json();\n      const gettedData = [];\n\n      for (const key in data) {\n        gettedData.push({\n          title: data[key].taskDetails,\n          date: data[key].taskEndDate,\n          id: data[key].taskId\n        });\n      }\n\n      setTaskDetails(gettedData);\n    } catch (error) {\n      setError(error.massage);\n    }\n\n    setIsLoading(false);\n  }; // Handling Errors And Loading Status\n\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Found No Taks..\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 17\n  }, this);\n\n  if (taskDetails.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(TaskList, {\n      taskGetted: taskDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (error) {\n    content = {\n      error\n    };\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(TaskForm, {\n        onAddTask: posting\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getData,\n        children: \"Get My Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Task, \"ukCPao1cB89FcbTyHvPaJ2FOqMM=\");\n\n_c = Task;\nexport default Task; // const getData = useCallback(async () => {\n//   setIsLoading(true);\n//   setError(null);\n//   try {\n//     const response = await fetch(\n//       'https://react-section-14-f36dd-default-rtdb.firebaseio.com/Task.json'\n//     );\n//     if (!response.ok) {\n//       throw new Error('Something went wrong!');\n//     }\n//     const data = await response.json();\n//     let gettedData = [];\n//     for (const key in data) {\n//       gettedData.push({\n//         Title: data[key].taskDetails,\n//         date: data[key].taskEndDate,\n//         id: data[key].taskId,\n//       });\n//     }\n//     setTaskDetails(gettedData);\n//   } catch (error) {\n//     setError(error.message);\n//   }\n//   setIsLoading(false);\n// }, []);\n// useEffect(() => {\n//   getData();\n// }, [getData]);\n// useEffect(() => {\n//   getData();\n// }, [getData]);\n\nvar _c;\n\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"sources":["E:/Mo'men Data/Training/Routing-Authentication/Auth/src/components/tasks/Task.js"],"names":["React","useState","TaskForm","TaskList","Task","taskDetails","setTaskDetails","isLoading","setIsLoading","error","setError","url","posting","TasksInputs","response","fetch","method","headers","body","JSON","stringify","data","json","console","log","getData","ok","Error","gettedData","key","push","title","date","taskEndDate","id","taskId","massage","content","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport TaskForm from './TaskForm';\r\nimport TaskList from './TaskList';\r\n\r\nconst Task = () => {\r\n  const [taskDetails, setTaskDetails] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const url =\r\n    'https://second-demo-auth-post-get-default-rtdb.firebaseio.com/Task.json';\r\n\r\n  // POSTING REQUEST:\r\n\r\n  const posting = async (TasksInputs) => {\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(TasksInputs),\r\n    });\r\n\r\n    const data = await response.json();\r\n    console.log(data);\r\n  };\r\n\r\n  // GET REQUEST:\r\n\r\n  const getData = async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        throw new Error('Somthing Went Wrong');\r\n      }\r\n      const data = await response.json();\r\n\r\n      const gettedData = [];\r\n\r\n      for (const key in data) {\r\n        gettedData.push({\r\n          title: data[key].taskDetails,\r\n          date: data[key].taskEndDate,\r\n          id: data[key].taskId,\r\n        });\r\n      }\r\n      setTaskDetails(gettedData);\r\n    } catch (error) {\r\n      setError(error.massage);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  // Handling Errors And Loading Status\r\n  let content = <p>Found No Taks..</p>;\r\n\r\n  if (taskDetails.length > 0) {\r\n    content = <TaskList taskGetted={taskDetails} />;\r\n  }\r\n  if (error) {\r\n    content = { error };\r\n  }\r\n  if (isLoading) {\r\n    content = <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <section>\r\n        <TaskForm onAddTask={posting} />\r\n      </section>\r\n      <section>\r\n        <button onClick={getData}>Get My Data</button>\r\n      </section>\r\n      <section>{content}</section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n\r\n// const getData = useCallback(async () => {\r\n//   setIsLoading(true);\r\n//   setError(null);\r\n//   try {\r\n//     const response = await fetch(\r\n//       'https://react-section-14-f36dd-default-rtdb.firebaseio.com/Task.json'\r\n//     );\r\n//     if (!response.ok) {\r\n//       throw new Error('Something went wrong!');\r\n//     }\r\n\r\n//     const data = await response.json();\r\n//     let gettedData = [];\r\n\r\n//     for (const key in data) {\r\n//       gettedData.push({\r\n//         Title: data[key].taskDetails,\r\n//         date: data[key].taskEndDate,\r\n//         id: data[key].taskId,\r\n//       });\r\n//     }\r\n\r\n//     setTaskDetails(gettedData);\r\n//   } catch (error) {\r\n//     setError(error.message);\r\n//   }\r\n//   setIsLoading(false);\r\n// }, []);\r\n\r\n// useEffect(() => {\r\n//   getData();\r\n// }, [getData]);\r\n\r\n// useEffect(() => {\r\n//   getData();\r\n// }, [getData]);\r\n"]},"metadata":{},"sourceType":"module"}