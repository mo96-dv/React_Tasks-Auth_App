{"ast":null,"code":"var _jsxFileName = \"E:\\\\Mo'men Data\\\\Training\\\\Routing-Authentication\\\\Auth\\\\src\\\\components\\\\tasks\\\\Task.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport TaskForm from './TaskForm';\nimport TaskList from './TaskList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Task = () => {\n  _s();\n\n  const [taskDetails, setTaskDetails] = useState(); // GET REQUEST:\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null); // SENDING A GET REQUEST\n\n  const getData = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://react-section-14-f36dd-default-rtdb.firebaseio.com/movies.json');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n      let gettedData = [];\n\n      for (const key in data) {\n        gettedData.push({\n          Title: data[key].taskDetails,\n          date: data[key].taskEndDate,\n          id: data[key].taskId\n        });\n      }\n\n      setTaskDetails(gettedData);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    getData();\n  }, [getData]); // const getData = async () => {\n  //   const response = await fetch(\n  //     'https://second-demo-auth-post-get-default-rtdb.firebaseio.com/Task.json'\n  //   );\n  //   const data = await response.json();\n  //   let gettedData = [];\n  //   for (const key in data) {\n  //     gettedData.push({\n  //       Title: data[key].taskDetails,\n  //       date: data[key].taskEndDate,\n  //       id: data[key].taskId,\n  //     });\n  //   }\n  //   setTaskDetails(gettedData);\n  //   getData();\n  // };\n  // POSTING REQUEST:\n\n  const url = 'https://second-demo-auth-post-get-default-rtdb.firebaseio.com/Task.json';\n\n  const posting = async Tasks => {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(Tasks)\n    });\n    const data = await response.json();\n    console.log(data);\n  };\n\n  posting();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(TaskForm, {\n        onAddTask: posting\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getData,\n        children: \"Get My Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(TaskList, {\n        TaskDetails: taskDetails,\n        getData: getData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Task, \"fghW9thp/QxJVh/MfGM6Yk67aYw=\");\n\n_c = Task;\nexport default Task;\n\nvar _c;\n\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"sources":["E:/Mo'men Data/Training/Routing-Authentication/Auth/src/components/tasks/Task.js"],"names":["React","useState","useCallback","useEffect","TaskForm","TaskList","Task","taskDetails","setTaskDetails","isLoading","setIsLoading","error","setError","getData","response","fetch","ok","Error","data","json","gettedData","key","push","Title","date","taskEndDate","id","taskId","message","url","posting","Tasks","method","headers","body","JSON","stringify","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport TaskForm from './TaskForm';\r\nimport TaskList from './TaskList';\r\n\r\nconst Task = () => {\r\n  const [taskDetails, setTaskDetails] = useState();\r\n\r\n  // GET REQUEST:\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // SENDING A GET REQUEST\r\n\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(\r\n        'https://react-section-14-f36dd-default-rtdb.firebaseio.com/movies.json'\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error('Something went wrong!');\r\n      }\r\n\r\n      const data = await response.json();\r\n      let gettedData = [];\r\n\r\n      for (const key in data) {\r\n        gettedData.push({\r\n          Title: data[key].taskDetails,\r\n          date: data[key].taskEndDate,\r\n          id: data[key].taskId,\r\n        });\r\n      }\r\n\r\n      setTaskDetails(gettedData);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  // const getData = async () => {\r\n  //   const response = await fetch(\r\n  //     'https://second-demo-auth-post-get-default-rtdb.firebaseio.com/Task.json'\r\n  //   );\r\n  //   const data = await response.json();\r\n\r\n  //   let gettedData = [];\r\n\r\n  //   for (const key in data) {\r\n  //     gettedData.push({\r\n  //       Title: data[key].taskDetails,\r\n  //       date: data[key].taskEndDate,\r\n  //       id: data[key].taskId,\r\n  //     });\r\n  //   }\r\n  //   setTaskDetails(gettedData);\r\n  //   getData();\r\n  // };\r\n\r\n  // POSTING REQUEST:\r\n\r\n  const url =\r\n    'https://second-demo-auth-post-get-default-rtdb.firebaseio.com/Task.json';\r\n\r\n  const posting = async (Tasks) => {\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(Tasks),\r\n    });\r\n\r\n    const data = await response.json();\r\n    console.log(data);\r\n  };\r\n\r\n  posting();\r\n  return (\r\n    <>\r\n      <section>\r\n        <TaskForm onAddTask={posting} />\r\n      </section>\r\n      <section>\r\n        <button onClick={getData}>Get My Data</button>\r\n      </section>\r\n      <section>\r\n        <TaskList TaskDetails={taskDetails} getData={getData} />\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n"]},"metadata":{},"sourceType":"module"}